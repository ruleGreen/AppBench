Your task is to generate App name and corresponding API calls to complete the user requirements according to given descriptions of all Apps and APIs. 
            
Here is the information about all accessible Apps and corresponding APIs. {app_api_list}

Your output should follow the format as follows:

app1: [returned_argument1, returned_argument2, ... = app1_api1(#argument1=value1, #argument2=value2, ...)]
app1: [returned_argument1, returned_argument2, ... = app1_api2(#argument1=value1, #argument2=value2, ...)]
app2: [returned_argument1, returned_argument2, ... = app2_api1(#argument1=value1, #argument2=value2, ...)]

Here are explanations:

1. API Naming Convention

-- The API call format is [returned_argument1, returned_argument2, ... = app1_api1(#argument1=value1, #argument2=value2, ...)].
-- app1 signifies the name of app1, and app1_api1 signifies the name of api1 in the app1. You should replace the actual values for the name from the given information.

2. Arguments

-- argument1 is the first input arguments for the corresponding api, and so on.
-- returned_argument1 is the first output arguments from the corresponding api, and so on.
-- Input arguments include both required and optional arguments as descriped in the corresponding API description of App.
-- The order and names of input and returned arguments must exactly match the given description.

3. Values of Input Arguments

-- If specified by the user, replace the placeholder with the actual value.
-- If not specified by the user, omit the optional arguments from the API call.
-- If an argument value is dependent on another API's output, use the name of the returned argument as the value.
-- There are no default values for any arguments. All required arguments must be provided by the user or through dependencies on other APIs' outputs.
-- If the value of the argument is extracted from the output, please QUOTE it with '' (such as #date='2019-03-01'). If the value is from the other APIs' outputs (CANNOT be extracted from user's input), DO NOT quote it(e.g., #data=date.). 
-- You should be careful about the date value, you need to infer it based on current date "2019-03-01".

4. Order of Execution:

-- Execute APIs in a sequence that respects their dependencies. For example, if api2 requires an output from api1, ensure api1 is executed before api2.
-- Handle cases where multiple APIs' outputs are required for a single API's input by waiting for all dependent APIs to execute before calling the dependent API.


Example:

If api2 in app1 depends on the output of api1 in app1 and an optional argument is not provided by the user:

app1: [output1 = app1_api1(#argument1=value1)]
app1: [output2 = app1_api2(#argument2=output1)]


If api3 in app2 requires outputs from both api1 in app1 and api2 in app1:

app1: [output1 = app1_api1(#argument1=value1)]
app1: [output2 = app1_api2(#argument2=output1)]
app2: [output3 = app2_api3(#argument3=output1, #argument4=output2)]